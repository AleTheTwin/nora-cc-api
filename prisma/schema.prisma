// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuario {
  nombre             String // Se manda
  password           String // Se manda
  matricula          String        @id // Se manda
  carrera            Carrera // Se manda
  rol                Rol // Se manda
  materiasCursando   Materia[]     @relation(name: "cursa")
  materiasImpartidas Materia[]     @relation("imparte")
  prestamos          Solicitud[]   @relation(name: "Solicita")
  observacion        Observacion[]
}

model Materia {
  nrc         String      @id @default(uuid())
  nombre      String      @unique // Se manda
  solicitudes Solicitud[]
  alumnos     Usuario[]   @relation(name: "cursa")
  profesor    Usuario     @relation(name: "imparte", fields: [profesorId], references: [matricula], onDelete: Cascade, onUpdate: Cascade)
  profesorId  String // Se manda
}

model Solicitud {
  id            String   @id @default(uuid())
  materia       Materia  @relation(fields: [materiaNRC], references: [nrc], onDelete: Cascade, onUpdate: Cascade)
  materiaNRC    String // Se manda
  horaSalida    DateTime // Se manda
  horaEntrada   DateTime // Se manda
  creadoEn      DateTime
  objetivo      String // Se manda
  equipoId      String @default("886dbac9-5951-4beb-9bc1-08dc586a7aa6")
  equipo        Equipo   @relation(fields: [equipoId], references: [numeroInventario], onDelete: Cascade, onUpdate: Cascade)
  solicitante   Usuario  @relation(name: "Solicita", fields: [solicitanteId], references: [matricula], onDelete: Cascade, onUpdate: Cascade)
  solicitanteId String
}

model Equipo {
  nombre           String // Se manda
  descripcion      String // Se manda
  numeroInventario String        @id @default(uuid())
  observaciones    Observacion[]
  solicitudes      Solicitud[]
}

model Observacion {
  id        String  @id @default(uuid())
  autor     Usuario @relation(fields: [autorId], references: [matricula], onDelete: Cascade, onUpdate: Cascade)
  autorIp   String
  autorId   String
  contenido String  @unique // Se manda
  equipo    Equipo  @relation(fields: [equipoId], references: [numeroInventario], onDelete: Cascade, onUpdate: Cascade)
  equipoId  String
}

enum Rol {
  alumno
  profesor
  administrador
}

enum Carrera {
  LTC
  LIS
  LE
  LRySC
  NA
}

model token {
  id       String  @unique
  isActive Boolean @default(false)
}
